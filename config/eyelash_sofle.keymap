#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/modifiers.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    macros {
        five_rights: five_rights {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;      // Delay between key presses in ms
            tap-ms = <30>;       // How long each key is held down in ms
            bindings = <&kp RIGHT_ARROW &kp RIGHT_ARROW &kp RIGHT_ARROW &kp RIGHT_ARROW &kp RIGHT_ARROW>;
        };

        five_downs: five_downs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW>;
        };

        five_ups: five_ups {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW>;
        };

        five_lefts: five_lefts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW>;
        };

        ctrl_five_rights: ctrl_five_rights {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings =
                <&macro_press &kp LCTRL>,
                <&macro_tap &kp RIGHT_ARROW>,
                <&macro_tap &kp RIGHT_ARROW>,
                <&macro_tap &kp RIGHT_ARROW>,
                <&macro_tap &kp RIGHT_ARROW>,
                <&macro_tap &kp RIGHT_ARROW>,
                <&macro_release &kp LCTRL>;
        };

        ctrl_five_lefts: ctrl_five_lefts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings =
                <&macro_press &kp LCTRL>,
                <&macro_tap &kp LEFT_ARROW>,
                <&macro_tap &kp LEFT_ARROW>,
                <&macro_tap &kp LEFT_ARROW>,
                <&macro_tap &kp LEFT_ARROW>,
                <&macro_tap &kp LEFT_ARROW>,
                <&macro_release &kp LCTRL>;
        };

win_z_4: win_z_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <300>;
            tap-ms = <30>;
            bindings = <&kp LG(Z) &kp N4 &kp ENTER>;
        };

        win_z_5: win_z_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <300>;
            tap-ms = <30>;
            bindings = <&kp LG(Z) &kp N5 &kp ENTER>;
        };

        win_z_6: win_z_6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <300>;
            tap-ms = <30>;
            bindings = <&kp LG(Z) &kp N6 &kp ENTER>;
        };

        win_z_7: win_z_7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <300>;
            tap-ms = <30>;
            bindings = <&kp LG(Z) &kp N7 &kp ENTER>;
        };

        win_z_8: win_z_8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <300>;
            tap-ms = <30>;
            bindings = <&kp LG(Z) &kp N8 &kp ENTER>;
        };


        ctrl_a_del: ctrl_a_del {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp LC(A) &kp DELETE>;
        };

        ctrl_shift_home_del: ctrl_shift_home_del {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp LC(LS(HOME)) &kp DELETE>;
        };

        ctrl_shift_end_del: ctrl_shift_end_del {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp LC(LS(END)) &kp DELETE>;
        };

        shift_home_del: shift_home_del {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp LS(HOME) &kp DELETE>;
        };

        shift_end_del: shift_end_del {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&kp LS(END) &kp DELETE>;
        };
    };

    behaviors {
        /* Mod-morph versions of the 5× arrow macros.
         * No Ctrl held  → 5× LEFT/RIGHT
         * Ctrl held     → Ctrl+5× LEFT/RIGHT
         */

        morph_left: morph_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&five_lefts>, <&ctrl_five_lefts>;
            mods = <(MOD_LCTL | MOD_RCTL)>;
        };

        morph_right: morph_right {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&five_rights>, <&ctrl_five_rights>;
            mods = <(MOD_LCTL | MOD_RCTL)>;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7     &kp N8     &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U      &kp I      &kp O            &kp P       &kp LA(LS(Q))
&kp CAPS    &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J      &kp K      &kp L            &kp LG(LA(LS(N7)))    &kp LA(LS(W))
&kp LSHFT   &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M      &kp COMMA  &kp DOT          &kp LG( LA( LS( X ) ) )    &kp ENTER
&kp C_PLAY_PAUSE  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &kp SPACE   &mo 1    &kp ENTER        &mo 2  &kp LG( LA( LEFT_SHIFT ) )  &kp PRINTSCREEN      &kp K_CONTEXT_MENU  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        }; 

        layer_1 {
            bindings = <
&kp F11   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &kp F12
&trans      &trans        &trans       &win_z_4        &win_z_5        &win_z_6           &mmv MOVE_DOWN   &kp PG_UP        &kp HOME          &kp RIGHT_BRACKET      &kp FSLH   &kp SEMI         &kp LC(LA(W))
&trans      &trans        &trans          &trans           &win_z_7           &win_z_8           &mmv MOVE_LEFT   &kp PG_DN        &kp END         &kp BSLH    &kp MINUS  &kp EQUAL  &kp APOS
&kp LSHFT      &trans  &bootloader  &soft_off  &trans  &kp LG( L )    &mmv MOVE_RIGHT  &kp TILDE  &kp GRAVE  &kp KP_DIVIDE  &kp LS(EQUAL)    &kp LS(MINUS)           &kp LEFT_BRACKET
&kp C_MUTE  &kp LCTRL           &sys_reset          &kp LEFT_ALT     &trans           &trans             &mkp LCLK        &kp LS(FSLH)  &kp LS(APOS) &kp LS(LEFT_BRACKET)      &kp NON_US_BACKSLASH     &kp LA(LS(S))
            >;

            display-name = "layer1";
            sensor-bindings = <&inc_dec_kp LC(LS(EQUAL)) LC(MINUS)>;
        };

        layer_2 {
            bindings = <
&kp LA(F4)  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &kp LG(HOME)  &kp LG(LS(E))    &kp F13     &kp LC(LS(HOME))  &kp LC(LS(END))  &ctrl_shift_home_del      &ctrl_shift_end_del     &kp LC(HOME)      &kp LC(END)
&trans      &trans    &five_ups  &ctrl_five_lefts        &ctrl_five_rights        &trans          &kp F14   &kp LS(HOME)  &kp LS(END)  &shift_home_del      &shift_end_del    &kp LC(PG_UP)    &kp LC(PG_DN)
&trans     &five_lefts  &five_downs    &five_rights        &kp LC(LS(V))        &trans          &morph_left   &trans  &trans  &trans      &trans     &kp LC(LS(PG_UP))     &kp LC(LS(PG_DN))
&trans     &trans    &trans          &trans   &kp LC(LA(V))        &kp LC(LA(B))          &morph_right  &trans  &trans  &trans  &trans  &trans  &trans
&kp C_MUTE     &kp LCTRL        &trans          &trans        &trans        &bt BT_CLR_ALL          &mkp LCLK        &trans  &out OUT_BLE  &bt BT_CLR      &out OUT_USB     &ctrl_a_del
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};